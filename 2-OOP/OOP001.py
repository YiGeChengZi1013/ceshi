# anaconda基本使用
#     anaconda主要是一个虚拟环境管理器
#     还是一个安装包管理器
#     conda list  : 显示anaconda安装的包
#     conda env list：显示anaconda的虚拟环境列表
#       conda create -n xxx  python=3.6 创建Python版本为3的虚拟环境  名称为xxx





# Python面向对象的编程
#     基础
#     公有私有
#     继承
#     组合
# 魔法函数
#     魔法函数概述
#     构造类魔法函数
#     运算类魔法函数



# 1 面向对象概述 （object oriente，OO）

# OOP思想
#     接触到任意一个任务，首先想到的是任务这个世界的构成，是由模型构成的
#
# 几个名词
#     OO 面向对象
#     OOA 面向对象的分析
#     OOD  面向对象的设计
#     OOI xxx的实现
#     OOP  xxx的编程
# 过程：OOA -> OOD -> OOI  面向对象的实现过程


#类和对象的概念
#     类：抽象名词，代表一个集合，共性的事物
#     对象：具体的事物，单个个体
#
# 类和对象的关系：
#     一个具象，代表一类事物的某一个个体
#     一个是抽象，代表的是一大类事物
#
#类中的内容，应该具有两个内容
#     代表事物的特征，叫做属性（变量）
#     表明事物的功能或动作，称为成员方法（函数）


# 2.类的基本实现
# 类的命名
#     遵守变量命名的规范
#     大驼峰（由一个或者多个单词构成，每个单词首字母大写，单词跟单词相连）
#     尽量避开跟系统命名相似的命名
# 如何声明一个类
#     必须用class关键字
#     类由属性和方法结构，其他不允许出现
#     成员属性定义可以直接使用变量赋值，如果没有值，可以使用NONE
#     案例化类：
#         变量 = 类名（）实例化一个对象
#       访问对象成员
#         使用点操作符
#             obj.成员属性名称
#             obj.成员方法
#       可以通过默认内置变量检查类和对象的所有成员
#         对象所有成员检查
#             #dict前后各有两个下划线
#             obj.__dict__
#         类所有成员的检查
#             #dict前后各有两个下划线
#             class_name.__dict__
#
# 类中函数带有参数（self）;如不带，则为绑定函数，要调用时需要用类名调用，而不是对象名。
# 绑定类方法的类中成员的访问需要用 __class__成员名来访问



# 构造函数：__init__（self）类的初始化


# 6,：面向对象的三大特性
#     封装
#     继承
#     多态
#
# 6.1：封装：
#     封装就是对对象的成员进行访问限制
#     封装的三个级别
#         公开：public
#         受保护的：protected
#         私有的， private
#         public， private，protected 不是关键字
#     判断对象位置
#         对象内部
#         对象外部
#         子类中
#     私有
#         私有成员是最高级的封装，只能在当前类或对象中访问
#         在成员前面添加两个下划线即可
#                 __name = "xxxxxx"
#         Python的私有不是真私有，是一种name mangling的改名策略
#         可以使用对象.classname__attribuname访问
#         访问私有变量   对象名._类名__私有变量名
#     受保护的封装  protected
#             受保护的封装是将对象成员进行一定级别的封装，然后在类中或者在子类中可以访问，但是在外部不可以访问
#             封装方法：在成员名称前添加一个下划线即可
#     公开的，公共的 public
#         公共的封装实际对成员没有任何操作，任何话地方都可以访问。

# 3.2继承
#     继承就是一个类可以获得另外一个类中成员属性和成员方法
#     作用：减少代码增加代码的服用功能  同时可以设置类与类的直接关系、
#     继承与被继承的概念
#         被继承的类叫父类，也叫基类 也叫超类
#         用于继承的类，叫子类，也叫派生类
#         继承与被继承一定存在一个 is——a的关系



#     继承的语法：
#     继承的特征：
#         所有的类都继承自Object类，即所有的类都是object的子类
#         子类一旦继承父类，则可以使用父类中除了私有成员外的所有内容
#         子类继承父类后并没有将父类成员完全赋值到子类中， 而是通过；应用关系访问调用
#         子类中可以定义独有的成员属性和方法
#         子类中定义的成员和父类如果相同，则优先使用子类成员
#         子类如果想扩充父类的方法，可以在定义新方法的同时访问父类成员来进行代码重写
#         可以使用 父类名.父类成员  的格式来调用父类成员,也可以使用super().父类成员的格式来调用
#     继承变量函数的查找顺序问题
#         优先查找自己的变量
#         没有则查找父类
#         构造函数如果本类中没有定义,则自动查找父类构造函数
#         如果本类有定义,则不再继续向上查找



    # 构造函数
    #     是一类特殊的函数,在类进行实例化之前进行调用
    #如果定义了构造函数,则实例化时使用构造函数,不查找父类构造函数
    #如果没定义,则自动查找父类构造函数
    #如果子类没定义,父类的构造函数带参数,则构造对象时的参数应该按父类参数构造\

# super
#     super不是关键字,而是一个类
#     super的作用是获取MRO(MethodRedolustionOrder)列表中的第一个类
#     super与父类直接没任何实质性关系,但通过super可以调用到父类
#     super使用两个方法,常见在构造函数中调用父类的构造函数










